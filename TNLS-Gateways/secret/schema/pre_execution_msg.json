{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "PreExecutionMsg",
  "description": "Message received from the relayer.",
  "type": "object",
  "required": [
    "handle",
    "nonce",
    "payload",
    "payload_hash",
    "payload_signature",
    "routing_info",
    "sender_info",
    "source_network",
    "task_id"
  ],
  "properties": {
    "handle": {
      "description": "Handle to be called at destination contract.",
      "type": "string"
    },
    "nonce": {
      "description": "Unique random bytes used to encrypt payload.",
      "allOf": [
        {
          "$ref": "#/definitions/Binary"
        }
      ]
    },
    "payload": {
      "description": "Encryption of (data, routing info, and user info).",
      "allOf": [
        {
          "$ref": "#/definitions/Binary"
        }
      ]
    },
    "payload_hash": {
      "description": "Hash of encrypted input values.",
      "allOf": [
        {
          "$ref": "#/definitions/Binary"
        }
      ]
    },
    "payload_signature": {
      "description": "Signature of hash of encrypted input values.",
      "allOf": [
        {
          "$ref": "#/definitions/Binary"
        }
      ]
    },
    "routing_info": {
      "description": "Destination contract address and code hash.",
      "allOf": [
        {
          "$ref": "#/definitions/Contract"
        }
      ]
    },
    "sender_info": {
      "description": "User verification key / public chain address.",
      "allOf": [
        {
          "$ref": "#/definitions/Sender"
        }
      ]
    },
    "source_network": {
      "description": "Source network (where to go once pulled into the next gateway).",
      "type": "string"
    },
    "task_id": {
      "description": "Task ID generated by the relayer.",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    }
  },
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Contract": {
      "type": "object",
      "required": [
        "address",
        "hash"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/HumanAddr"
        },
        "hash": {
          "type": "string"
        }
      }
    },
    "HumanAddr": {
      "type": "string"
    },
    "Sender": {
      "type": "object",
      "required": [
        "address",
        "public_key"
      ],
      "properties": {
        "address": {
          "description": "User public chain address.",
          "allOf": [
            {
              "$ref": "#/definitions/HumanAddr"
            }
          ]
        },
        "public_key": {
          "description": "User verification key.",
          "allOf": [
            {
              "$ref": "#/definitions/Binary"
            }
          ]
        }
      }
    }
  }
}
