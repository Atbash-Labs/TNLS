{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "HandleMsg",
  "anyOf": [
    {
      "type": "object",
      "required": [
        "input"
      ],
      "properties": {
        "input": {
          "type": "object",
          "required": [
            "inputs"
          ],
          "properties": {
            "inputs": {
              "$ref": "#/definitions/PreExecutionMsg"
            }
          }
        }
      }
    },
    {
      "type": "object",
      "required": [
        "output"
      ],
      "properties": {
        "output": {
          "type": "object",
          "required": [
            "outputs"
          ],
          "properties": {
            "outputs": {
              "$ref": "#/definitions/PostExecutionMsg"
            }
          }
        }
      }
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Contract": {
      "type": "object",
      "required": [
        "address",
        "hash"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/HumanAddr"
        },
        "hash": {
          "type": "string"
        }
      }
    },
    "HumanAddr": {
      "type": "string"
    },
    "PostExecutionMsg": {
      "type": "object",
      "required": [
        "parameters",
        "result",
        "task_id"
      ],
      "properties": {
        "parameters": {
          "type": "string"
        },
        "result": {
          "$ref": "#/definitions/Binary"
        },
        "task_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "PreExecutionMsg": {
      "type": "object",
      "required": [
        "handle",
        "payload",
        "payload_hash",
        "payload_signature",
        "routing_info",
        "sender",
        "task_id"
      ],
      "properties": {
        "handle": {
          "description": "Handle to be called at destination contract.",
          "type": "string"
        },
        "payload": {
          "description": "Encryption of (data, routing info, and user address/verifying key). Includes additional data (AD).",
          "allOf": [
            {
              "$ref": "#/definitions/Binary"
            }
          ]
        },
        "payload_hash": {
          "description": "Hash of unencrypted input values.",
          "allOf": [
            {
              "$ref": "#/definitions/Binary"
            }
          ]
        },
        "payload_signature": {
          "description": "Signature of hash of unencrypted input values.",
          "allOf": [
            {
              "$ref": "#/definitions/Binary"
            }
          ]
        },
        "routing_info": {
          "description": "Destination contract address and code hash.",
          "allOf": [
            {
              "$ref": "#/definitions/Contract"
            }
          ]
        },
        "sender": {
          "description": "User verification key / public chain address.",
          "allOf": [
            {
              "$ref": "#/definitions/Sender"
            }
          ]
        },
        "task_id": {
          "description": "Task ID coming from the relayer.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "Sender": {
      "type": "object",
      "required": [
        "address",
        "public_key"
      ],
      "properties": {
        "address": {
          "description": "User public chain address.",
          "allOf": [
            {
              "$ref": "#/definitions/HumanAddr"
            }
          ]
        },
        "public_key": {
          "description": "User verification key.",
          "allOf": [
            {
              "$ref": "#/definitions/Binary"
            }
          ]
        }
      }
    }
  }
}
